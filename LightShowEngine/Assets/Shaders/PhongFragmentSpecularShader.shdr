#version 330 core
out vec4 color;


#define AMOUNT_OF_POINT_LIGHTS /*MAL*/0 

struct Material {
	sampler2D texture_diffuse1;
	sampler2D texture_specular1;
    float shininess;
}; 
struct DirectionalLight {
    vec3 direction;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};  
struct PointLight {    
    vec3 position;
    
    float constant;
    float linear;
    float quadratic;  

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};  

uniform PointLight pointLights[AMOUNT_OF_POINT_LIGHTS];

uniform DirectionalLight directionalLight;



uniform Material material;
  
uniform vec3 viewPosition;

in vec2 textureCoords_o;
in vec3 normal_o;
in vec3 fragPosition_o; 

vec3 CalcDirLight(DirectionalLight light, vec3 normal, vec3 viewDir);  
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir); 

void main()
{
    // Properties
    vec3 norm		= normalize(normal_o);
    vec3 viewDir	= normalize(viewPosition - fragPosition_o);

    // Phase 1: Directional lighting
    vec3 result = CalcDirLight(directionalLight, norm, viewDir);

    // Phase 2: Point lights
    for(int i = 0; i < AMOUNT_OF_POINT_LIGHTS; i++)
	{
       result += CalcPointLight(pointLights[i], norm, fragPosition_o, viewDir);    
	}

    // Phase 3: Spot light
    //result += CalcSpotLight(spotLight, norm, fragPosition_o, viewDir);    
    
    color = vec4(result, 1.0);
}

vec3 CalcDirLight(DirectionalLight light, vec3 normal, vec3 viewDir)
{
    vec3 lightDir = normalize(-light.direction);
    // Diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // Specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // Combine results
    vec3 ambient  = light.ambient  * vec3(texture(material.texture_diffuse1, textureCoords_o));
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(material.texture_diffuse1, textureCoords_o));
    vec3 specular = light.specular * spec * vec3(texture(material.texture_specular1, textureCoords_o));
    return (ambient + diffuse + specular);
}  

// Calculates the color when using a point light.
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    // Diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // Specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // Attenuation
    float distance    = length(light.position - fragPos);
    float attenuation = 1.0f / (light.constant + light.linear * distance + 
  			     light.quadratic * (distance * distance));    
    // Combine results
    vec3 ambient  = light.ambient  * vec3(texture(material.texture_diffuse1, textureCoords_o));
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(material.texture_diffuse1, textureCoords_o));
    vec3 specular = light.specular * spec * vec3(texture(material.texture_specular1, textureCoords_o));
    ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
} 